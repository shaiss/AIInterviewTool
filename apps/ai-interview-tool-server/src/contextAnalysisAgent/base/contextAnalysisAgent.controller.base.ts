/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContextAnalysisAgentService } from "../contextAnalysisAgent.service";
import { ContextAnalysisAgentCreateInput } from "./ContextAnalysisAgentCreateInput";
import { ContextAnalysisAgent } from "./ContextAnalysisAgent";
import { ContextAnalysisAgentFindManyArgs } from "./ContextAnalysisAgentFindManyArgs";
import { ContextAnalysisAgentWhereUniqueInput } from "./ContextAnalysisAgentWhereUniqueInput";
import { ContextAnalysisAgentUpdateInput } from "./ContextAnalysisAgentUpdateInput";

export class ContextAnalysisAgentControllerBase {
  constructor(protected readonly service: ContextAnalysisAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContextAnalysisAgent })
  async createContextAnalysisAgent(
    @common.Body() data: ContextAnalysisAgentCreateInput
  ): Promise<ContextAnalysisAgent> {
    return await this.service.createContextAnalysisAgent({
      data: data,
      select: {
        createdAt: true,
        entities: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContextAnalysisAgent] })
  @ApiNestedQuery(ContextAnalysisAgentFindManyArgs)
  async contextAnalysisAgents(
    @common.Req() request: Request
  ): Promise<ContextAnalysisAgent[]> {
    const args = plainToClass(ContextAnalysisAgentFindManyArgs, request.query);
    return this.service.contextAnalysisAgents({
      ...args,
      select: {
        createdAt: true,
        entities: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContextAnalysisAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contextAnalysisAgent(
    @common.Param() params: ContextAnalysisAgentWhereUniqueInput
  ): Promise<ContextAnalysisAgent | null> {
    const result = await this.service.contextAnalysisAgent({
      where: params,
      select: {
        createdAt: true,
        entities: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContextAnalysisAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContextAnalysisAgent(
    @common.Param() params: ContextAnalysisAgentWhereUniqueInput,
    @common.Body() data: ContextAnalysisAgentUpdateInput
  ): Promise<ContextAnalysisAgent | null> {
    try {
      return await this.service.updateContextAnalysisAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          entities: true,
          id: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContextAnalysisAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContextAnalysisAgent(
    @common.Param() params: ContextAnalysisAgentWhereUniqueInput
  ): Promise<ContextAnalysisAgent | null> {
    try {
      return await this.service.deleteContextAnalysisAgent({
        where: params,
        select: {
          createdAt: true,
          entities: true,
          id: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
