/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ContextAnalysisAgent as PrismaContextAnalysisAgent,
} from "@prisma/client";

export class ContextAnalysisAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContextAnalysisAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contextAnalysisAgent.count(args);
  }

  async contextAnalysisAgents<
    T extends Prisma.ContextAnalysisAgentFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ContextAnalysisAgentFindManyArgs>
  ): Promise<PrismaContextAnalysisAgent[]> {
    return this.prisma.contextAnalysisAgent.findMany<Prisma.ContextAnalysisAgentFindManyArgs>(
      args
    );
  }
  async contextAnalysisAgent<
    T extends Prisma.ContextAnalysisAgentFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ContextAnalysisAgentFindUniqueArgs>
  ): Promise<PrismaContextAnalysisAgent | null> {
    return this.prisma.contextAnalysisAgent.findUnique(args);
  }
  async createContextAnalysisAgent<
    T extends Prisma.ContextAnalysisAgentCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ContextAnalysisAgentCreateArgs>
  ): Promise<PrismaContextAnalysisAgent> {
    return this.prisma.contextAnalysisAgent.create<T>(args);
  }
  async updateContextAnalysisAgent<
    T extends Prisma.ContextAnalysisAgentUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ContextAnalysisAgentUpdateArgs>
  ): Promise<PrismaContextAnalysisAgent> {
    return this.prisma.contextAnalysisAgent.update<T>(args);
  }
  async deleteContextAnalysisAgent<
    T extends Prisma.ContextAnalysisAgentDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ContextAnalysisAgentDeleteArgs>
  ): Promise<PrismaContextAnalysisAgent> {
    return this.prisma.contextAnalysisAgent.delete(args);
  }
}
