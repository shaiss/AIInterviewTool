/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SupervisoryAgent as PrismaSupervisoryAgent,
} from "@prisma/client";

export class SupervisoryAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SupervisoryAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.supervisoryAgent.count(args);
  }

  async supervisoryAgents<T extends Prisma.SupervisoryAgentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupervisoryAgentFindManyArgs>
  ): Promise<PrismaSupervisoryAgent[]> {
    return this.prisma.supervisoryAgent.findMany<Prisma.SupervisoryAgentFindManyArgs>(
      args
    );
  }
  async supervisoryAgent<T extends Prisma.SupervisoryAgentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupervisoryAgentFindUniqueArgs>
  ): Promise<PrismaSupervisoryAgent | null> {
    return this.prisma.supervisoryAgent.findUnique(args);
  }
  async createSupervisoryAgent<T extends Prisma.SupervisoryAgentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupervisoryAgentCreateArgs>
  ): Promise<PrismaSupervisoryAgent> {
    return this.prisma.supervisoryAgent.create<T>(args);
  }
  async updateSupervisoryAgent<T extends Prisma.SupervisoryAgentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupervisoryAgentUpdateArgs>
  ): Promise<PrismaSupervisoryAgent> {
    return this.prisma.supervisoryAgent.update<T>(args);
  }
  async deleteSupervisoryAgent<T extends Prisma.SupervisoryAgentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupervisoryAgentDeleteArgs>
  ): Promise<PrismaSupervisoryAgent> {
    return this.prisma.supervisoryAgent.delete(args);
  }
}
