/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupervisoryAgentService } from "../supervisoryAgent.service";
import { SupervisoryAgentCreateInput } from "./SupervisoryAgentCreateInput";
import { SupervisoryAgent } from "./SupervisoryAgent";
import { SupervisoryAgentFindManyArgs } from "./SupervisoryAgentFindManyArgs";
import { SupervisoryAgentWhereUniqueInput } from "./SupervisoryAgentWhereUniqueInput";
import { SupervisoryAgentUpdateInput } from "./SupervisoryAgentUpdateInput";

export class SupervisoryAgentControllerBase {
  constructor(protected readonly service: SupervisoryAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SupervisoryAgent })
  async createSupervisoryAgent(
    @common.Body() data: SupervisoryAgentCreateInput
  ): Promise<SupervisoryAgent> {
    return await this.service.createSupervisoryAgent({
      data: data,
      select: {
        backgroundInfo: true,
        context: true,
        createdAt: true,
        id: true,
        suggestedQuestions: true,
        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SupervisoryAgent] })
  @ApiNestedQuery(SupervisoryAgentFindManyArgs)
  async supervisoryAgents(
    @common.Req() request: Request
  ): Promise<SupervisoryAgent[]> {
    const args = plainToClass(SupervisoryAgentFindManyArgs, request.query);
    return this.service.supervisoryAgents({
      ...args,
      select: {
        backgroundInfo: true,
        context: true,
        createdAt: true,
        id: true,
        suggestedQuestions: true,
        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SupervisoryAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supervisoryAgent(
    @common.Param() params: SupervisoryAgentWhereUniqueInput
  ): Promise<SupervisoryAgent | null> {
    const result = await this.service.supervisoryAgent({
      where: params,
      select: {
        backgroundInfo: true,
        context: true,
        createdAt: true,
        id: true,
        suggestedQuestions: true,
        summary: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SupervisoryAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupervisoryAgent(
    @common.Param() params: SupervisoryAgentWhereUniqueInput,
    @common.Body() data: SupervisoryAgentUpdateInput
  ): Promise<SupervisoryAgent | null> {
    try {
      return await this.service.updateSupervisoryAgent({
        where: params,
        data: data,
        select: {
          backgroundInfo: true,
          context: true,
          createdAt: true,
          id: true,
          suggestedQuestions: true,
          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SupervisoryAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupervisoryAgent(
    @common.Param() params: SupervisoryAgentWhereUniqueInput
  ): Promise<SupervisoryAgent | null> {
    try {
      return await this.service.deleteSupervisoryAgent({
        where: params,
        select: {
          backgroundInfo: true,
          context: true,
          createdAt: true,
          id: true,
          suggestedQuestions: true,
          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
