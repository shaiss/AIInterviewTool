/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SupervisoryAgent } from "./SupervisoryAgent";
import { SupervisoryAgentCountArgs } from "./SupervisoryAgentCountArgs";
import { SupervisoryAgentFindManyArgs } from "./SupervisoryAgentFindManyArgs";
import { SupervisoryAgentFindUniqueArgs } from "./SupervisoryAgentFindUniqueArgs";
import { CreateSupervisoryAgentArgs } from "./CreateSupervisoryAgentArgs";
import { UpdateSupervisoryAgentArgs } from "./UpdateSupervisoryAgentArgs";
import { DeleteSupervisoryAgentArgs } from "./DeleteSupervisoryAgentArgs";
import { SupervisoryAgentService } from "../supervisoryAgent.service";
@graphql.Resolver(() => SupervisoryAgent)
export class SupervisoryAgentResolverBase {
  constructor(protected readonly service: SupervisoryAgentService) {}

  async _supervisoryAgentsMeta(
    @graphql.Args() args: SupervisoryAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SupervisoryAgent])
  async supervisoryAgents(
    @graphql.Args() args: SupervisoryAgentFindManyArgs
  ): Promise<SupervisoryAgent[]> {
    return this.service.supervisoryAgents(args);
  }

  @graphql.Query(() => SupervisoryAgent, { nullable: true })
  async supervisoryAgent(
    @graphql.Args() args: SupervisoryAgentFindUniqueArgs
  ): Promise<SupervisoryAgent | null> {
    const result = await this.service.supervisoryAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SupervisoryAgent)
  async createSupervisoryAgent(
    @graphql.Args() args: CreateSupervisoryAgentArgs
  ): Promise<SupervisoryAgent> {
    return await this.service.createSupervisoryAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SupervisoryAgent)
  async updateSupervisoryAgent(
    @graphql.Args() args: UpdateSupervisoryAgentArgs
  ): Promise<SupervisoryAgent | null> {
    try {
      return await this.service.updateSupervisoryAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SupervisoryAgent)
  async deleteSupervisoryAgent(
    @graphql.Args() args: DeleteSupervisoryAgentArgs
  ): Promise<SupervisoryAgent | null> {
    try {
      return await this.service.deleteSupervisoryAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
