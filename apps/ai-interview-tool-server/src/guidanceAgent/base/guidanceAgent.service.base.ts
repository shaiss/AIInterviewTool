/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GuidanceAgent as PrismaGuidanceAgent } from "@prisma/client";

export class GuidanceAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GuidanceAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.guidanceAgent.count(args);
  }

  async guidanceAgents<T extends Prisma.GuidanceAgentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuidanceAgentFindManyArgs>
  ): Promise<PrismaGuidanceAgent[]> {
    return this.prisma.guidanceAgent.findMany<Prisma.GuidanceAgentFindManyArgs>(
      args
    );
  }
  async guidanceAgent<T extends Prisma.GuidanceAgentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuidanceAgentFindUniqueArgs>
  ): Promise<PrismaGuidanceAgent | null> {
    return this.prisma.guidanceAgent.findUnique(args);
  }
  async createGuidanceAgent<T extends Prisma.GuidanceAgentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuidanceAgentCreateArgs>
  ): Promise<PrismaGuidanceAgent> {
    return this.prisma.guidanceAgent.create<T>(args);
  }
  async updateGuidanceAgent<T extends Prisma.GuidanceAgentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuidanceAgentUpdateArgs>
  ): Promise<PrismaGuidanceAgent> {
    return this.prisma.guidanceAgent.update<T>(args);
  }
  async deleteGuidanceAgent<T extends Prisma.GuidanceAgentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuidanceAgentDeleteArgs>
  ): Promise<PrismaGuidanceAgent> {
    return this.prisma.guidanceAgent.delete(args);
  }
}
