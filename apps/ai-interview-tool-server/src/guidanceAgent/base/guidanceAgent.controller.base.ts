/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GuidanceAgentService } from "../guidanceAgent.service";
import { GuidanceAgentCreateInput } from "./GuidanceAgentCreateInput";
import { GuidanceAgent } from "./GuidanceAgent";
import { GuidanceAgentFindManyArgs } from "./GuidanceAgentFindManyArgs";
import { GuidanceAgentWhereUniqueInput } from "./GuidanceAgentWhereUniqueInput";
import { GuidanceAgentUpdateInput } from "./GuidanceAgentUpdateInput";

export class GuidanceAgentControllerBase {
  constructor(protected readonly service: GuidanceAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GuidanceAgent })
  async createGuidanceAgent(
    @common.Body() data: GuidanceAgentCreateInput
  ): Promise<GuidanceAgent> {
    return await this.service.createGuidanceAgent({
      data: data,
      select: {
        createdAt: true,
        guidance: true,
        id: true,
        keyTopics: true,
        transcript: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GuidanceAgent] })
  @ApiNestedQuery(GuidanceAgentFindManyArgs)
  async guidanceAgents(
    @common.Req() request: Request
  ): Promise<GuidanceAgent[]> {
    const args = plainToClass(GuidanceAgentFindManyArgs, request.query);
    return this.service.guidanceAgents({
      ...args,
      select: {
        createdAt: true,
        guidance: true,
        id: true,
        keyTopics: true,
        transcript: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GuidanceAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async guidanceAgent(
    @common.Param() params: GuidanceAgentWhereUniqueInput
  ): Promise<GuidanceAgent | null> {
    const result = await this.service.guidanceAgent({
      where: params,
      select: {
        createdAt: true,
        guidance: true,
        id: true,
        keyTopics: true,
        transcript: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GuidanceAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGuidanceAgent(
    @common.Param() params: GuidanceAgentWhereUniqueInput,
    @common.Body() data: GuidanceAgentUpdateInput
  ): Promise<GuidanceAgent | null> {
    try {
      return await this.service.updateGuidanceAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          guidance: true,
          id: true,
          keyTopics: true,
          transcript: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GuidanceAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGuidanceAgent(
    @common.Param() params: GuidanceAgentWhereUniqueInput
  ): Promise<GuidanceAgent | null> {
    try {
      return await this.service.deleteGuidanceAgent({
        where: params,
        select: {
          createdAt: true,
          guidance: true,
          id: true,
          keyTopics: true,
          transcript: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
