/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GuidanceAgent } from "./GuidanceAgent";
import { GuidanceAgentCountArgs } from "./GuidanceAgentCountArgs";
import { GuidanceAgentFindManyArgs } from "./GuidanceAgentFindManyArgs";
import { GuidanceAgentFindUniqueArgs } from "./GuidanceAgentFindUniqueArgs";
import { CreateGuidanceAgentArgs } from "./CreateGuidanceAgentArgs";
import { UpdateGuidanceAgentArgs } from "./UpdateGuidanceAgentArgs";
import { DeleteGuidanceAgentArgs } from "./DeleteGuidanceAgentArgs";
import { GuidanceAgentService } from "../guidanceAgent.service";
@graphql.Resolver(() => GuidanceAgent)
export class GuidanceAgentResolverBase {
  constructor(protected readonly service: GuidanceAgentService) {}

  async _guidanceAgentsMeta(
    @graphql.Args() args: GuidanceAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GuidanceAgent])
  async guidanceAgents(
    @graphql.Args() args: GuidanceAgentFindManyArgs
  ): Promise<GuidanceAgent[]> {
    return this.service.guidanceAgents(args);
  }

  @graphql.Query(() => GuidanceAgent, { nullable: true })
  async guidanceAgent(
    @graphql.Args() args: GuidanceAgentFindUniqueArgs
  ): Promise<GuidanceAgent | null> {
    const result = await this.service.guidanceAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GuidanceAgent)
  async createGuidanceAgent(
    @graphql.Args() args: CreateGuidanceAgentArgs
  ): Promise<GuidanceAgent> {
    return await this.service.createGuidanceAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GuidanceAgent)
  async updateGuidanceAgent(
    @graphql.Args() args: UpdateGuidanceAgentArgs
  ): Promise<GuidanceAgent | null> {
    try {
      return await this.service.updateGuidanceAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GuidanceAgent)
  async deleteGuidanceAgent(
    @graphql.Args() args: DeleteGuidanceAgentArgs
  ): Promise<GuidanceAgent | null> {
    try {
      return await this.service.deleteGuidanceAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
