/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuestionGenerationAgentService } from "../questionGenerationAgent.service";
import { QuestionGenerationAgentCreateInput } from "./QuestionGenerationAgentCreateInput";
import { QuestionGenerationAgent } from "./QuestionGenerationAgent";
import { QuestionGenerationAgentFindManyArgs } from "./QuestionGenerationAgentFindManyArgs";
import { QuestionGenerationAgentWhereUniqueInput } from "./QuestionGenerationAgentWhereUniqueInput";
import { QuestionGenerationAgentUpdateInput } from "./QuestionGenerationAgentUpdateInput";

export class QuestionGenerationAgentControllerBase {
  constructor(protected readonly service: QuestionGenerationAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestionGenerationAgent })
  async createQuestionGenerationAgent(
    @common.Body() data: QuestionGenerationAgentCreateInput
  ): Promise<QuestionGenerationAgent> {
    return await this.service.createQuestionGenerationAgent({
      data: data,
      select: {
        apiKey: true,
        createdAt: true,
        generatedQuestion: true,
        id: true,
        transcript: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestionGenerationAgent] })
  @ApiNestedQuery(QuestionGenerationAgentFindManyArgs)
  async questionGenerationAgents(
    @common.Req() request: Request
  ): Promise<QuestionGenerationAgent[]> {
    const args = plainToClass(
      QuestionGenerationAgentFindManyArgs,
      request.query
    );
    return this.service.questionGenerationAgents({
      ...args,
      select: {
        apiKey: true,
        createdAt: true,
        generatedQuestion: true,
        id: true,
        transcript: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestionGenerationAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async questionGenerationAgent(
    @common.Param() params: QuestionGenerationAgentWhereUniqueInput
  ): Promise<QuestionGenerationAgent | null> {
    const result = await this.service.questionGenerationAgent({
      where: params,
      select: {
        apiKey: true,
        createdAt: true,
        generatedQuestion: true,
        id: true,
        transcript: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestionGenerationAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuestionGenerationAgent(
    @common.Param() params: QuestionGenerationAgentWhereUniqueInput,
    @common.Body() data: QuestionGenerationAgentUpdateInput
  ): Promise<QuestionGenerationAgent | null> {
    try {
      return await this.service.updateQuestionGenerationAgent({
        where: params,
        data: data,
        select: {
          apiKey: true,
          createdAt: true,
          generatedQuestion: true,
          id: true,
          transcript: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestionGenerationAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuestionGenerationAgent(
    @common.Param() params: QuestionGenerationAgentWhereUniqueInput
  ): Promise<QuestionGenerationAgent | null> {
    try {
      return await this.service.deleteQuestionGenerationAgent({
        where: params,
        select: {
          apiKey: true,
          createdAt: true,
          generatedQuestion: true,
          id: true,
          transcript: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
