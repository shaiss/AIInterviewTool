/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QuestionGenerationAgent as PrismaQuestionGenerationAgent,
} from "@prisma/client";

export class QuestionGenerationAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestionGenerationAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questionGenerationAgent.count(args);
  }

  async questionGenerationAgents<
    T extends Prisma.QuestionGenerationAgentFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QuestionGenerationAgentFindManyArgs>
  ): Promise<PrismaQuestionGenerationAgent[]> {
    return this.prisma.questionGenerationAgent.findMany<Prisma.QuestionGenerationAgentFindManyArgs>(
      args
    );
  }
  async questionGenerationAgent<
    T extends Prisma.QuestionGenerationAgentFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QuestionGenerationAgentFindUniqueArgs>
  ): Promise<PrismaQuestionGenerationAgent | null> {
    return this.prisma.questionGenerationAgent.findUnique(args);
  }
  async createQuestionGenerationAgent<
    T extends Prisma.QuestionGenerationAgentCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QuestionGenerationAgentCreateArgs>
  ): Promise<PrismaQuestionGenerationAgent> {
    return this.prisma.questionGenerationAgent.create<T>(args);
  }
  async updateQuestionGenerationAgent<
    T extends Prisma.QuestionGenerationAgentUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QuestionGenerationAgentUpdateArgs>
  ): Promise<PrismaQuestionGenerationAgent> {
    return this.prisma.questionGenerationAgent.update<T>(args);
  }
  async deleteQuestionGenerationAgent<
    T extends Prisma.QuestionGenerationAgentDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QuestionGenerationAgentDeleteArgs>
  ): Promise<PrismaQuestionGenerationAgent> {
    return this.prisma.questionGenerationAgent.delete(args);
  }
}
