/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QuestionGenerationAgent } from "./QuestionGenerationAgent";
import { QuestionGenerationAgentCountArgs } from "./QuestionGenerationAgentCountArgs";
import { QuestionGenerationAgentFindManyArgs } from "./QuestionGenerationAgentFindManyArgs";
import { QuestionGenerationAgentFindUniqueArgs } from "./QuestionGenerationAgentFindUniqueArgs";
import { CreateQuestionGenerationAgentArgs } from "./CreateQuestionGenerationAgentArgs";
import { UpdateQuestionGenerationAgentArgs } from "./UpdateQuestionGenerationAgentArgs";
import { DeleteQuestionGenerationAgentArgs } from "./DeleteQuestionGenerationAgentArgs";
import { QuestionGenerationAgentService } from "../questionGenerationAgent.service";
@graphql.Resolver(() => QuestionGenerationAgent)
export class QuestionGenerationAgentResolverBase {
  constructor(protected readonly service: QuestionGenerationAgentService) {}

  async _questionGenerationAgentsMeta(
    @graphql.Args() args: QuestionGenerationAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QuestionGenerationAgent])
  async questionGenerationAgents(
    @graphql.Args() args: QuestionGenerationAgentFindManyArgs
  ): Promise<QuestionGenerationAgent[]> {
    return this.service.questionGenerationAgents(args);
  }

  @graphql.Query(() => QuestionGenerationAgent, { nullable: true })
  async questionGenerationAgent(
    @graphql.Args() args: QuestionGenerationAgentFindUniqueArgs
  ): Promise<QuestionGenerationAgent | null> {
    const result = await this.service.questionGenerationAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuestionGenerationAgent)
  async createQuestionGenerationAgent(
    @graphql.Args() args: CreateQuestionGenerationAgentArgs
  ): Promise<QuestionGenerationAgent> {
    return await this.service.createQuestionGenerationAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => QuestionGenerationAgent)
  async updateQuestionGenerationAgent(
    @graphql.Args() args: UpdateQuestionGenerationAgentArgs
  ): Promise<QuestionGenerationAgent | null> {
    try {
      return await this.service.updateQuestionGenerationAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestionGenerationAgent)
  async deleteQuestionGenerationAgent(
    @graphql.Args() args: DeleteQuestionGenerationAgentArgs
  ): Promise<QuestionGenerationAgent | null> {
    try {
      return await this.service.deleteQuestionGenerationAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
