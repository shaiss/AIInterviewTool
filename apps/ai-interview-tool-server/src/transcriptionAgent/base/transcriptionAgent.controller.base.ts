/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TranscriptionAgentService } from "../transcriptionAgent.service";
import { TranscriptionAgentCreateInput } from "./TranscriptionAgentCreateInput";
import { TranscriptionAgent } from "./TranscriptionAgent";
import { TranscriptionAgentFindManyArgs } from "./TranscriptionAgentFindManyArgs";
import { TranscriptionAgentWhereUniqueInput } from "./TranscriptionAgentWhereUniqueInput";
import { TranscriptionAgentUpdateInput } from "./TranscriptionAgentUpdateInput";

export class TranscriptionAgentControllerBase {
  constructor(protected readonly service: TranscriptionAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TranscriptionAgent })
  async createTranscriptionAgent(
    @common.Body() data: TranscriptionAgentCreateInput
  ): Promise<TranscriptionAgent> {
    return await this.service.createTranscriptionAgent({
      data: data,
      select: {
        audioFilePath: true,
        createdAt: true,
        id: true,
        transcript: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TranscriptionAgent] })
  @ApiNestedQuery(TranscriptionAgentFindManyArgs)
  async transcriptionAgents(
    @common.Req() request: Request
  ): Promise<TranscriptionAgent[]> {
    const args = plainToClass(TranscriptionAgentFindManyArgs, request.query);
    return this.service.transcriptionAgents({
      ...args,
      select: {
        audioFilePath: true,
        createdAt: true,
        id: true,
        transcript: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TranscriptionAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transcriptionAgent(
    @common.Param() params: TranscriptionAgentWhereUniqueInput
  ): Promise<TranscriptionAgent | null> {
    const result = await this.service.transcriptionAgent({
      where: params,
      select: {
        audioFilePath: true,
        createdAt: true,
        id: true,
        transcript: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TranscriptionAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTranscriptionAgent(
    @common.Param() params: TranscriptionAgentWhereUniqueInput,
    @common.Body() data: TranscriptionAgentUpdateInput
  ): Promise<TranscriptionAgent | null> {
    try {
      return await this.service.updateTranscriptionAgent({
        where: params,
        data: data,
        select: {
          audioFilePath: true,
          createdAt: true,
          id: true,
          transcript: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TranscriptionAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTranscriptionAgent(
    @common.Param() params: TranscriptionAgentWhereUniqueInput
  ): Promise<TranscriptionAgent | null> {
    try {
      return await this.service.deleteTranscriptionAgent({
        where: params,
        select: {
          audioFilePath: true,
          createdAt: true,
          id: true,
          transcript: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
