/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TranscriptionAgent } from "./TranscriptionAgent";
import { TranscriptionAgentCountArgs } from "./TranscriptionAgentCountArgs";
import { TranscriptionAgentFindManyArgs } from "./TranscriptionAgentFindManyArgs";
import { TranscriptionAgentFindUniqueArgs } from "./TranscriptionAgentFindUniqueArgs";
import { CreateTranscriptionAgentArgs } from "./CreateTranscriptionAgentArgs";
import { UpdateTranscriptionAgentArgs } from "./UpdateTranscriptionAgentArgs";
import { DeleteTranscriptionAgentArgs } from "./DeleteTranscriptionAgentArgs";
import { TranscriptionAgentService } from "../transcriptionAgent.service";
@graphql.Resolver(() => TranscriptionAgent)
export class TranscriptionAgentResolverBase {
  constructor(protected readonly service: TranscriptionAgentService) {}

  async _transcriptionAgentsMeta(
    @graphql.Args() args: TranscriptionAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TranscriptionAgent])
  async transcriptionAgents(
    @graphql.Args() args: TranscriptionAgentFindManyArgs
  ): Promise<TranscriptionAgent[]> {
    return this.service.transcriptionAgents(args);
  }

  @graphql.Query(() => TranscriptionAgent, { nullable: true })
  async transcriptionAgent(
    @graphql.Args() args: TranscriptionAgentFindUniqueArgs
  ): Promise<TranscriptionAgent | null> {
    const result = await this.service.transcriptionAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TranscriptionAgent)
  async createTranscriptionAgent(
    @graphql.Args() args: CreateTranscriptionAgentArgs
  ): Promise<TranscriptionAgent> {
    return await this.service.createTranscriptionAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TranscriptionAgent)
  async updateTranscriptionAgent(
    @graphql.Args() args: UpdateTranscriptionAgentArgs
  ): Promise<TranscriptionAgent | null> {
    try {
      return await this.service.updateTranscriptionAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TranscriptionAgent)
  async deleteTranscriptionAgent(
    @graphql.Args() args: DeleteTranscriptionAgentArgs
  ): Promise<TranscriptionAgent | null> {
    try {
      return await this.service.deleteTranscriptionAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
